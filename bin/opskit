#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
OpsKit - Unified Operations Tool Management Platform

This is the main entry point for OpsKit, providing a command-line interface
for managing and running various operational tools.

Usage:
    opskit                  # Interactive mode
    opskit list             # List all available tools
    opskit run <tool>       # Run a specific tool
    opskit config          # Configuration management
    opskit update          # Update OpsKit and tools
    opskit version         # Show version information
"""

import os
import sys
import click
from pathlib import Path

# Discover OpsKit root directory and virtual environment
OPSKIT_ROOT = Path(__file__).parent.parent.absolute()
VENV_PYTHON = OPSKIT_ROOT / '.venv' / 'bin' / 'python'

# If not running in virtual environment, re-execute with venv Python
if VENV_PYTHON.exists() and sys.executable != str(VENV_PYTHON):
    os.execv(str(VENV_PYTHON), [str(VENV_PYTHON), __file__] + sys.argv[1:])

# Now running in the correct virtual environment
# Add the OpsKit root directory to Python path
sys.path.insert(0, str(OPSKIT_ROOT))

try:
    from core.cli import OpsKitCLI
    from core.platform_utils import PlatformUtils
    from core.env import env
except ImportError as e:
    print(f"Error: Failed to import OpsKit core modules: {e}")
    print("Please ensure OpsKit is properly installed.")
    sys.exit(1)

# Load version from environment configuration
__version__ = env.version
__author__ = env.author


def print_version():
    """Print version information"""
    print(f"OpsKit v{__version__}")
    print(f"Python {sys.version}")
    print(f"Platform: {PlatformUtils.get_platform_info()}")


def handle_error(e, debug):
    """Handle errors consistently"""
    if debug:
        import traceback
        traceback.print_exc()
    else:
        print(f"Error: {e}")
    sys.exit(1)


# Global debug flag for error handling
_debug_mode = False


@click.group(invoke_without_command=True)
@click.option('--debug', is_flag=True, help='Enable debug mode')
@click.option('--version', '-v', is_flag=True, help='Show version information')
@click.pass_context
def cli(ctx, debug, version):
    """OpsKit - Unified Operations Tool Management Platform"""
    global _debug_mode
    _debug_mode = debug
    
    if version:
        print_version()
        return
    
    # Set debug mode
    if debug:
        os.environ['OPSKIT_LOG_LEVEL'] = 'DEBUG'
    
    # Ensure data directory exists for environment variables
    try:
        data_dir = OPSKIT_ROOT / 'data'
        data_dir.mkdir(exist_ok=True)
    except Exception as e:
        print(f"Error creating data directory: {e}")
        sys.exit(1)
    
    # If no command provided, enter interactive mode
    if ctx.invoked_subcommand is None:
        try:
            opskit_cli = OpsKitCLI()
            opskit_cli.interactive_mode()
        except Exception as e:
            handle_error(e, debug)


@cli.command()
@click.argument('category', required=False)
@click.option('--debug', is_flag=True, help='Enable debug mode')
def list(category, debug):
    """List all available tools by category"""
    try:
        opskit_cli = OpsKitCLI()
        opskit_cli.list_tools(category=category)
    except Exception as e:
        handle_error(e, debug or _debug_mode)


def complete_tool_names(ctx, args, incomplete):
    """Auto-complete tool names for the run command"""
    try:
        from core.cli import OpsKitCLI
        opskit_cli = OpsKitCLI()
        tools = opskit_cli.discover_tools()
        tool_names = []
        for category_tools in tools.values():
            for tool_info in category_tools:
                tool_names.append(tool_info['name'])
        return [name for name in tool_names if name.startswith(incomplete)]
    except:
        return []

@cli.command(context_settings=dict(ignore_unknown_options=True, allow_extra_args=True, allow_interspersed_args=False, help_option_names=[]))
@click.argument('tool_name', shell_complete=complete_tool_names)
@click.option('--debug', is_flag=True, help='Enable debug mode')
@click.pass_context
def run(ctx, tool_name, debug):
    """Run a specific tool with arguments"""
    # All remaining arguments after tool_name are passed to the tool
    tool_args = ctx.args
    
    try:
        opskit_cli = OpsKitCLI()
        exit_code = opskit_cli.run_tool(tool_name, tool_args)
        sys.exit(exit_code)
    except Exception as e:
        handle_error(e, debug or _debug_mode)


@cli.command()
@click.argument('query')
@click.option('--debug', is_flag=True, help='Enable debug mode')
def search(query, debug):
    """Search tools by name or description"""
    try:
        opskit_cli = OpsKitCLI()
        opskit_cli.search_tools(query)
    except Exception as e:
        handle_error(e, debug or _debug_mode)


@cli.command()
@click.argument('tool_name', required=False)
@click.option('--debug', is_flag=True, help='Enable debug mode')
def config(tool_name, debug):
    """Configuration management interface"""
    try:
        opskit_cli = OpsKitCLI()
        if tool_name:
            opskit_cli.configure_tool(tool_name)
        else:
            opskit_cli.configuration_menu()
    except Exception as e:
        handle_error(e, debug or _debug_mode)


@cli.command()
@click.option('--debug', is_flag=True, help='Enable debug mode')
def update(debug):
    """Update OpsKit to latest version (git pull)"""
    try:
        opskit_cli = OpsKitCLI()
        opskit_cli.update_opskit()
    except Exception as e:
        handle_error(e, debug or _debug_mode)


@cli.command()
@click.option('--debug', is_flag=True, help='Enable debug mode')
def status(debug):
    """Show system status and health check"""
    try:
        opskit_cli = OpsKitCLI()
        opskit_cli.show_status()
    except Exception as e:
        handle_error(e, debug or _debug_mode)


@cli.command()
def version():
    """Show version information"""
    print_version()


@cli.command()
@click.argument('shell', type=click.Choice(['bash', 'zsh', 'fish']), required=True)
def completion(shell):
    """Generate shell completion script"""
    try:
        opskit_cli = OpsKitCLI()
        opskit_cli.generate_completion(shell)
    except Exception as e:
        handle_error(e, _debug_mode)


def main():
    """Main entry point"""
    try:
        cli()
    except KeyboardInterrupt:
        print("\nOperation cancelled by user")
        sys.exit(0)


if __name__ == '__main__':
    main()